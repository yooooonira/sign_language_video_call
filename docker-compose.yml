version: "3.9"
services:
  app:
    build:
      context: ./drf_api
      dockerfile: Dockerfile
      args:
        - DEV=true
    ports:
      - "8000:8000"
    volumes:
      - ./drf_api:/app
      - ./static:/vol/web
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    environment:
      - DB_HOST=db
      - DB_NAME=devdb
      - DB_USER=devuser
      - DB_PASS=changeme
      - DEBUG=1
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,app ##

    depends_on:
      - db
      - redis

  db:
    image: postgres:15
    volumes:
      - dev-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=devdb
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=changeme

  redis:  #메모리사용량 진단
    image: redis:7-alpine
    ports:
      - "6379:6379"
    
  redis_exporter: #캐시?? (redis 직접 스크레이프하던 설정을 exporter로 바꿈)
    image: oliver006/redis_exporter
    command:
      - '--redis.addr=redis:6379'
    ports:
        - "9121:9121"
    depends_on:
      - redis


  prometheus:
    image: prom/prometheus    #프로메테우스의 최신 버전 이미지를 가져다 컨테니어 실행 
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml #로컬의 prometheus.yml 설정파일을 컨테이너 내부 /etc/prometheus/prometheus.yml 경로에 매핑.
      - ./prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml #알람 룰을 정의한 파일을 컨테이너 내부로 연결.
    ports:
      - "9090:9090"          #로컬(호스트) 9090 포트를 컨테이너의 9090 포트와 연결. 브라우저에서 http://localhost:9090

  grafana:
    image: grafana/grafana   #Grafana 최신 버전 이미지 사용.
    ports:
      - "3000:3000"          #로컬 3000번 포트와 컨테이너 3000번 포트를 매핑.
    depends_on:
      - prometheus
    volumes:
      - grafana-storage:/var/lib/grafana  # 그라파나 데이터 저장 

  alertmanager:
    image: prom/alertmanager
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    ports:
      - "9093:9093"
    depends_on:
      - prometheus

  ai:
    build:
      context: ./fastapi_api
      dockerfile: Dockerfile
    ports:
      - "8001:8001"              
    volumes:
      - ./fastapi_api:/app
    environment:
      - DB_HOST=db
      - DB_NAME=devdb
      - DB_USER=devuser
      - DB_PASS=changeme
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PYTHONUNBUFFERED=1


  ai_worker:
    build:
      context: ./AI_Language
      dockerfile: ai_worker/Dockerfile
    env_file:
      - AI_Language/.env  
    volumes:
      - ./AI_Language:/app/AI_Language
      - ./AI_Language/ai_worker:/app/AI_Language
    depends_on:
      - ai
    restart: unless-stopped



volumes:
  dev-db-data:
  grafana-storage:    # 그라파나 데이터 저장 



